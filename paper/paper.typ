#import "template.typ": *
#import "@preview/cetz:0.3.1": canvas, draw

#show: report.with(
  title: [ Problème du voyageur canadien couvrant ],
  course: [ Résolution de problème ],
  authors: ("Paul Chambaz", "Philipp Hanussek" ),
  university: [ Sorbonne Université ],
  reference: [ Parcours #smallcaps[Ai2d] & #smallcaps[Iq] M1 ],
  bibliography-path: "bibliography.yml",
  nb-columns: 2,
  abstract: [
    #lorem(20)
  ]
)

== Introduction

== Related Work

Reinforcement learning algorithms for continuous control domains have evolved
significantly in recent years. The development of actor-critic architectures
has proven particularly effective, with algorithms like DDPG @lillicrap2019 and
SAC @haarnoja2018 establishing themselves as standard approaches. These methods
combine the advantages of policy gradient methods with value-based learning,
enabling sample-efficient learning in continuous action spaces.

DDPG employs a deterministic actor that maximizes a learned Q-function,
operating entirely off-policy to improve sample efficiency. However, DDPG
presents stability issues, demonstrating sensitivity to hyperparameter choices
and exploration strategies. SAC extends this framework by incorporating entropy
maximization, encouraging exploration while learning a stochastic policy. The
entropy term provides additional stability, allowing SAC to achieve both better
sample efficiency and final performance compared to DDPG in many domains.

The challenge of addressing the distribution shift when transitioning from
offline to online reinforcement learning has received increasing attention.
Offline reinforcement learning methods train agents using previously collected
datasets without environment interaction, eliminating exploration costs but
introducing optimization difficulties. IQL @kostrikov2021 approaches this
problem by completely avoiding direct querying of the learned Q-function with
unseen actions during training, using expectile regression to estimate the
maximum value of Q-functions. Similarly, CALQL @nakamoto2024 applies a
constraint to the conservative Q-learning framework to reduce overestimation
bias during offline learning while enabling efficient online fine-tuning. Both
methods aim to mitigate performance degradation observed when agents trained
offline begin interacting with environments directly.

The ability to learn truly off-policy—from data generated by arbitrary or random policies—represents another research direction. Traditional actor-critic methods are categorized as off-policy but often struggle when presented with data significantly different from their current policy distribution. This limitation arises because their critic updates depend on actions sampled by the actor, creating an implicit coupling that restricts genuine off-policy learning. Some algorithms have attempted to address this issue through several methods but the fundamental actor-critic interdependence remains.

AFU @perringilbert2024 introduces a structural departure from previous approaches by maintaining critic updates that remain entirely independent from the actor. Unlike other algorithms derived from Q-learning for continuous control, AFU aims to solve the maximization problem inherent in Q-learning through a mechanism based on value and advantage decomposition, employing conditional gradient scaling. This approach potentially enables more effective learning from arbitrary data distributions without requiring explicit constraints during the critic learning phase.

== Background



// We consider a standard Markov Decision Process (MDP), defined as a tuple
//
// $ cal(M) = (cal(S) \, cal(A) \, T \, R \, gamma) $
//
// , where $cal(S)$ is a
// continuous state space, $cal(A)$ a continuous action space, $T$ the
// transition probability, $R : cal(S) times cal(A) arrow.r bb(R)$ the
// reward function, and $gamma in \[ 0 \, 1 \)$ the discount factor. The
// goal is to learn a policy $pi$ that maximizes the expected cumulative
// reward: $ bb(E)_pi [sum_(t = 0)^oo gamma^t R (s_t \, a_t)] . $
//
// The optimal Q-function $Q^(\*) (s \, a)$ is defined as:
// $ Q^(\*) (s \, a) = bb(E)_(pi^(\*)) [sum_(t = 0)^oo gamma^t R (s_t \, a_t) divides s_0 = s \, a_0 = a] \, $
// where $pi^(\*)$ denotes the optimal policy.
//
// In continuous action spaces, computing $max_a Q (s \, a)$ is
// intractable, which motivates the use of parametric actors or
// regression-based methods like AFU to approximate this maximization.

== Methods

=== Environment

In order to test our algorithms, we wrapped the gymnasium environments in personalized wrapper that contains the following methods: \_set_state, get_obs, get_observation_space and get_action_space.

=== Algorithms

We reimplemented DDPG, SAC, AFU, IQL and Cal-QL with the BBRL library.

=== Overview

AFU (Actor-Free Updates) is an off-policy reinforcement learning
algorithm that decouples the critic update from the actor. The core
innovation lies in how AFU solves the #emph[max-Q problem];: instead of
relying on an actor network to approximate $arg max_a Q (s \, a)$, it
trains a value network $V_phi.alt (s)$ via regression to estimate
$max_a Q (s \, a)$ directly.

AFU employs three types of networks:

- A Q-function $Q_psi (s \, a)$, trained using temporal-difference
  learning;

- A value network $V_(phi.alt_i) (s)$, trained to approximate
  $max_a Q (s \, a)$;

- An advantage network $A_(xi_i) (s \, a)$, enforcing
  $Q (s \, a) approx V (s) + A (s \, a)$, with $A (s \, a) lt.eq 0$.

=== Solving the Max-Q Problem

The value and advantage networks are trained using the following
soft-constrained loss:
$ Lambda'_(V \, A) (phi.alt \, xi) = bb(E)_((s \, a) tilde.op cal(D)) [Z (Upsilon^a (s) - Q_psi (s \, a) \, A_xi (s \, a))] \, $
where $ Z (x \, y) = cases(delim: "{", (x + y)^2 \, & upright("if ") x gt.eq 0, x^2 + y^2 \, & upright("otherwise")) $, and
$Upsilon^a (s)$ modulates the gradient update to down-weight increases
in $V_phi.alt$ when they would otherwise overestimate $Q$. This
conditional gradient rescaling avoids the instability issues observed in
regularized approaches like IQL or SQL.

=== Actor Training in AFU-alpha

In AFU-alpha, a stochastic actor $pi_theta$ is used for data collection
and trained using a SAC-style loss:
$ L_pi (theta) = bb(E)_(s \, a tilde.op pi_theta) [alpha log pi_theta (a divides s) - Q_psi (s \, a)] \, $
$ L_(upright("temp")) (alpha) = bb(E)_(s \, a tilde.op pi_theta) [- alpha log pi_theta (a divides s) - alpha H^(‾)] \, $
where $H^(‾)$ is a target entropy and $alpha$ is a temperature parameter
optimized during training.

=== AFU-beta: Actor Guidance via Gradient Projection

To improve upon AFU-alpha and address SAC-like failure modes, AFU-beta
introduces a regressed guidance network $mu_zeta (s)$, trained to match
actions with high Q-values. Actor gradients are then projected to avoid
directions that deviate from $mu_zeta (s)$ in low-value regions:
$ upright(bold(G))_(s \, a) (nabla_a Q_psi (s \, a)) = cases(delim: "{", upright("proj")_(tack.t (mu_zeta (s) - a)) (nabla_a Q_psi (s \, a)) \, & upright("if misaligned and ") Q (s \, a) < V (s) \,, nabla_a Q_psi (s \, a) \, & upright("otherwise") .) $

This results in a modified policy gradient
$nabla_theta^(upright("MODIF")) L_pi (theta)$, which helps prevent the
actor from becoming trapped in local optima.

=== Connection to Research Objectives

AFU's design directly addresses our two research hypotheses:

+ #strong[Learning from Random Data:] Since AFU's critic is
  actor-independent, it can learn effectively from random or off-policy
  transitions, unlike SAC or DDPG.

+ #strong[Offline-to-Online Stability:] AFU's critic does not suffer
  from over- or underestimation when exposed to unseen actions during
  the transition from offline to online learning, offering more stable
  performance.

In this study we will try to validate these hypotheses by creating various experimental settings. We will also compare AFU with other algorithms such as SAC, IQL and Cal-QL.

== Experimental study

=== Off and On-Policy Training

==== First Results

We evaluated AFU on the CartPoleContinuous environment and obtained results that closely match those observed using Mr. Perrin's original implementation. [These results are included in the figures attached to this report] -- Mettre les figures. AFU significantly outperforms SAC on this task. Notably, AFU achieves these results in only 50k iterations, compared to the 200k required by SAC. As shown in the histograms, AFU also demonstrates greater consistency, suggesting improved stability and reliability during training.

However in the Pendulum environment, despite multiple runs, AFU performs poorly, failing to converge even after 1 million steps. In contrast, SAC reliably converges in under 50k steps. Given these results, we did not proceed with Off-Policy training for AFU on this environment.

Finally, we conducted experiments on LunarLander. This time, AFU performed well and successfully converged. We runned 1 million steps, but analysis of the learning curve indicates that convergence was already achieved by around 200k steps. We provide histograms showing performance distributions, which (albeit potentially exaggerated) suggest that AFU substantially outperforms SAC on this task.

Encouraged by these results, we tested AFU in an Off-Policy setting on LunarLander, using 200k training steps. Unfortunately, the results were similar to those of SAC: neither algorithm achieved meaningful convergence. To verify whether this was due to insufficient data, we extended the training to 1 million steps, but AFU still failed to converge under Off-Policy training.

These results suggest that while AFU performs competitively--and at times better than SAC--in On-Policy settings, its Off-Policy capabilities remain limited, particularly in more complex environments like LunarLander.

==== Make AFU more intersting than SAC in an Off-Policy setting

Our preliminary results suggest that the initial hypothesis -- that AFU can effectively learn from uniformly generated state-action data -- is likely incorrect. This observation has led us to explore potential reasons behind this behavior and to design alternative experimental settings that could both validate AFU's utility and demonstrate its Off-Policy potential compared to algorithms such as SAC. We outline two such experiments below.

1. Varying the Degree of Policy-Driven Behavior via an Epsilon Parameter

A straightforward experimental modification involves introducing a tunable parameter $epsilon$ $in$ [0, 1]. At each step of data generation, a uniform random variable is sampled. If the sample is less than $epsilon$, a state-action pair is drawn uniformly at random, mimicking our prior Off-Policy setting. Otherwise, the action taken is the one prescribed by the current policy, corresponding to the On-Policy setting.

This setup allows us to generate a range of datasets interpolating between the On-Policy regime ($epsilon$ = 0) and fully random Off-Policy regime ($epsilon$ = 1). We propose to plot the performance across varying $epsilon$ values, using statistical summaries such as whisker plots (e.g., Q1, IQM, Q3) to visualize trends. If AFU is truly more Off-Policy capable than SAC, its performance degradation should be less pronounced as $epsilon$ increases. This experiment offers a simple yet effective framework for assessing the Off-Policy robustness of learning algorithms. [Résultats à inclure dans le rapport]

2. State-Space Constraints and the Role of Accessible States

To better understand the mechanisms behind AFU's behavior, we return to the tabular case. In this setting, it is possible to explicitly construct a lookup table that maps each state to the optimal action over an infinite horizon. When the state space is sufficiently small, exhaustive exploration via random state-action pairs can, in principle, lead to convergence—even for algorithms that are not inherently Off-Policy.

For example, in a simple 4x5 maze with 4 actions per state, the total number of state-action pairs is only 80. After sufficient repetitions (e.g., 80k samples), learning the optimal action mapping becomes feasible via brute force. In deep reinforcement learning, such a lookup table is no longer feasible due to the continuous and high-dimensional nature of the state and action spaces. However, the underlying goal — learning a function that approximates such a mapping — remains intact.

This perspective sheds light on our results in CartPoleContinuous. Despite the continuous nature of the problem, its effective state-space dimensionality is low. The first state variable (cart position) exhibits a high degree of symmetry and repetition, and we further constrained velocities to lie between -8 and +8. These simplifications reduce the practical complexity of the environment. Thus, brute-force learning may still succeed, even when relying on random data.

Importantly, much of the theoretical state-space is not reachable during normal episodes. For example, while velocity can range from -∞ to +∞, in practice, only a narrow subspace of values is observed. We refer to this subspace as the accessible state space. Uniformly sampling across the full space may therefore introduce states that are highly unrealistic and ultimately irrelevant to learning a useful policy.

This observation generalizes. Consider a tabular environment with 100B states, where the optimal trajectory only spans 10 states. Random sampling would rarely encounter meaningful states, and learning would stagnate. In LunarLander, we observed behaviors in which the agent exits the visible screen or exhibits unusual dynamics such as rotating mid-air — scenarios that are rarely encountered under a standard policy. Learning accurate Q-values for such states may come at the expense of learning for states within the accessible region.

Based on this, we propose a second experiment. First, define bounds on each dimension of the state space to better approximate the accessible subspace. Training the algorithm solely within these constraints may yield better convergence. We can then extend this by performing random walks through the environment: sample an initial state within the constrained bounds, and then take random actions for each step. This would naturally constrain the set of states encountered during training.

Such an experimental setup simulates learning from behavior that is entirely unrelated to the agent's own policy. A critic capable of learning accurate Q-values in this setting -- as AFU purports to do -- should outperform critics like SAC, which rely on the actor for accurate Q-value estimation. This setup thus offers a clearer test of the Off-Policy learning capacity of AFU.

The same $epsilon$-based framework from the first experiment could be employed here, offering another way to measure degradation in performance as the data distribution diverges from the policy. [Résultats à inclure dans le rapport]

=== Offline to Online Training

==== First Results

We also evaluated AFU in an Offline-to-Online setting, where the agent first learns from a fixed dataset and then transitions to online learning. We used the same datasets as in the previous experiments, but this time we trained AFU for 1 million steps in an offline setting before switching to online training.

== Conclusion

== Appendix A

=== Experimental Details

==== Environment Wrappers

The custom environment wrappers used in this study include the following methods:
- `_set_state`: Allows resetting the environment to a specific state.
- `get_obs`: Retrieves the current observation.
- `get_observation_space`: Returns the observation space of the environment.
- `get_action_space`: Returns the action space of the environment.

These wrappers were implemented to ensure compatibility with the algorithms and to facilitate reproducibility of the experiments.

==== Hyperparameters

The following hyperparameters were used for the experiments:
- Learning rate: 
- Discount factor ($gamma$): 
- Batch size: 
- Replay buffer size: 
- Target network update rate ($tau$): 
- Temperature parameter ($alpha$): 

=== Reproducibility

The code for all algorithms and experiments is available at [GitHub Repository]. The repository includes detailed instructions for setting up the environment and running the experiments.

=== Additional Figures

Figures referenced in the report, including learning curves and performance histograms, are provided in the supplementary materials. These figures illustrate the comparative performance of the algorithms across different environments and settings.

== Appendix B

=== Cal-QL errors

The Cal-QL algorithm was observed to exhibit significant performance degradation after 200k steps of training. This behavior was consistent across multiple runs and environments, indicating a potential issue with the algorithm's stability or convergence properties in the offline setting.

