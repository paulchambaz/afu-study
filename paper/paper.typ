#import "template.typ": *
#import "@preview/cetz:0.3.1": canvas, draw

#show: report.with(
  title: [ Actor Free critic Update for Off-policy and Offline learning ],
  course: [ #smallcaps[Ai2d] project ],
  authors: ("Paul Chambaz", "Frédéric Li Combeau" ),
  university: [ Sorbonne University ],
  reference: [ #smallcaps[Ai2d] & #smallcaps[Iq] M1 ],
  bibliography-path: "bibliography.yml",
  nb-columns: 2,
  abstract: [
    #lorem(20)
  ]
)

== Introduction

== Related Work

Reinforcement learning algorithms for continuous control domains have evolved
significantly in recent years. The development of actor-critic architectures
has proven particularly effective, with algorithms like DDPG @lillicrap2019 and
SAC @haarnoja2018 establishing themselves as standard approaches. These methods
combine the advantages of policy gradient methods with value-based learning,
enabling sample-efficient learning in continuous action spaces.

DDPG employs a deterministic actor that maximizes a learned Q-function,
operating entirely off-policy to improve sample efficiency. However, DDPG
presents stability issues, demonstrating sensitivity to hyperparameter choices
and exploration strategies. SAC extends this framework by incorporating entropy
maximization, encouraging exploration while learning a stochastic policy. The
entropy term provides additional stability, allowing SAC to achieve both better
sample efficiency and final performance compared to DDPG in many domains.

The challenge of addressing the distribution shift when transitioning from
offline to online reinforcement learning has received increasing attention.
Offline reinforcement learning methods train agents using previously collected
datasets without environment interaction, eliminating exploration costs but
introducing optimization difficulties. IQL @kostrikov2021 approaches this
problem by completely avoiding direct querying of the learned Q-function with
unseen actions during training, using expectile regression to estimate the
maximum value of Q-functions. Similarly, CALQL @nakamoto2024 applies a
constraint to the conservative Q-learning framework to reduce overestimation
bias during offline learning while enabling efficient online fine-tuning. Both
methods aim to mitigate performance degradation observed when agents trained
offline begin interacting with environments directly.

The ability to learn truly off-policy—from data generated by arbitrary or random policies—represents another research direction. Traditional actor-critic methods are categorized as off-policy but often struggle when presented with data significantly different from their current policy distribution. This limitation arises because their critic updates depend on actions sampled by the actor, creating an implicit coupling that restricts genuine off-policy learning. Some algorithms have attempted to address this issue through several methods but the fundamental actor-critic interdependence remains.

AFU @perringilbert2024 introduces a structural departure from previous approaches by maintaining critic updates that remain entirely independent from the actor. Unlike other algorithms derived from Q-learning for continuous control, AFU aims to solve the maximization problem inherent in Q-learning through a mechanism based on value and advantage decomposition, employing conditional gradient scaling. This approach potentially enables more effective learning from arbitrary data distributions without requiring explicit constraints during the critic learning phase.

== Preleminaries

We consider a discounted infinite horizon Markov Decision Problem (MDP) defined
as a tuple $<S, A, T, R, gamma>$, where $S$ represents the state space, $A$
denotes a continuous action space, $T$ is a stochastic transition function, $R:
S times A -> RR$ is a reward function, and $0 <= gamma < 1$ is a discount
factor. When an agent performs an action $a in A$ in state $s in S$, it
transitions to a new state $s'$ according to the transition probability
$T(s'|s,a)$ and receives a reward $r = R(s,a)$. We denote transitions as tuples
$(s, a, r, s')$.

The goal in reinforcement learning is to find a policy $pi: S -> A$
that maximizes the expected sum of discounted rewards. The optimal Q-function
$Q^*$ is defined as:

$
Q^* (s, a) = EE [
  sum_(t=0)^oo gamma^t R(s_t, a_t) | s_0 = s, a_0 = a, pi^*
]
$

where the policy used from $t = 1$ onwards is $pi^*$, which selects actions
optimally in every state. The optimal value function $V^*$ satisfies $V^*(s) =
max_{a in A} (Q^*(s, a))$.

In deep reinforcement learning, we approximate the value functions using neural
networks. We denote by $V_phi$ a function approximators for the value function,
and by $Q_psi$ a function approximator for the Q-function (the critic), where
$phi$, and $psi$ are the parameter vectors of neural networks.

On-policy and off-policy learning represent two distinct approaches in
reinforcement learning. In on-policy learning, the agent learns from data
collected using its current policy. In contrast, off-policy learning allows the
agent to learn from data collected using any policy, including random
exploration or previously stored experiences. This distinction is crucial as
truly off-policy algorithms can potentially learn more efficiently by reusing
diverse experiences.

Offline reinforcement learning takes the off-policy concept further by learning
entirely from a fixed dataset of previously collected transitions without any
environment interaction during training. When transitioning from offline to
online learning (where the agent begins to interact with the environment),
algorithms often suffer from distribution shift problems as the learned policy
encounters states and actions not represented in the offline dataset.

Actor-critic methods combine policy-based and value-based approaches. The actor
(policy network) determines which actions to take, while the critic (value
network) evaluates these actions. In traditional actor-critic architectures
like SAC and DDPG, the critic's updates depend on actions sampled by the actor,
creating an interdependence between the two components. The AFU algorithm
represents a departure from this approach by updating the critic independently
of the actor.

The temporal difference (TD) learning used in many algorithms aims to minimize
the following loss function for the critic:

$
L_Q (psi) = EE_((s, a, r, s') ~ B) [
  (Q_psi (s, a) - r - gamma V_phi (s'))^2
]
$

where $B$ represents a mini-batch of transitions sampled from an experience
replay buffer.

== Methods

=== Environment
For our experiments, we utilized the _Gymnasium_ framework, a widely adopted
benchmark for reinforcement learning research. Gymnasium provides standardized
environments, allowing for reproducible evaluation of algorithmic performance.
We primarily focused on continuous control tasks including Pendulum, CartPole
(continuous version), LunarLander (continuous version) and MountainCar
(continuous version).

To facilitate our research on off-policy learning properties, we extended these
environments with additional functionality. Each environment was modified to
support direct state manipulation through the implementation of a
`_set_state()` method. This modification enables precise control over the
system state, allowing us to sample uniformly from the state-action space
during our off-policy learning experiments. It should be noted that such direct
state manipulation represents a research tool rather than a practical
capability in real-world scenarios, where complete state control is rarely
possible.

=== Algorithms
We implemented several state-of-the-art deep reinforcement learning algorithms
using PyTorch and the BBRL (BlackBoard Reinforcement Learning) framework. BBRL
provides a modular architecture where agents interact through a shared
workspace, facilitating the implementation of complex algorithms with clear
separation of components. Each algorithm implementation follows the same
structure, comprising neural network architectures, training procedures, and
evaluation methods.

==== DDPG
Deep Deterministic Policy Gradient combines the deterministic policy gradient
algorithm with deep neural networks. It consists of two primary networks. The
actor network implements a deterministic policy $pi(s)$ that maps states to
specific actions. The critic network evaluates the quality of state-action
pairs by approximating the Q-function $Q(s, a)$. For stable learning, DDPG
employs target networks for both actor and critic, which are updated using soft
updates: $theta^"target" <- tau theta + (1 - tau) theta^"target"$, where $tau$
is a small value controlling the update rate. DDPG also uses a replay buffer to
store and randomly sample transitions, breaking the correlation between
consecutive samples and stabilizing learning.

==== SAC
Soft Actor-Critic extends the actor-critic architecture by incorporating
entropy maximization, encouraging exploration through stochastic policies. Our
SAC implementation includes a policy network, a Q-network and a V-network.
Unlike DDPG's deterministic policy, SAC's policy is stochastic, outputting a
Gaussian distribution over actions. The network produces both the mean $mu(s)$
and log standard deviation $log(sigma(s))$ of this distribution. Actions are
sampled using the reparameterization trick and squashed through a tanh function
to bound them. SAC employs two Q-networks to mitigate overestimation bias, a
common issue in Q-learning. Both networks approximate $Q(s, a)$ and the minimum
of their predictions is used for updates. The value network estimates the state
value $V(s)$, which represents the expected future return starting from state $s$
when following the policy. SAC optimizes the expected return plus the entropy
of the policy using a temperature parameter that determines the relative
importance of entropy versus reward. This parameter is automatically adjusted
during training to achieve a target entropy.

==== AFU
The Actor-Free Updates algorithm represents a significant departure from
traditional actor-critic methods. While algorithms like DDPG and SAC update
their critic using actions generated by the actor, AFU decouples these
components, enabling critic updates that are truly independent of the actor. 
AFU's architecture consists of two value networks, two advantage networks, a
Q-network and a policy network. The advantage networks estimates the the
advantage function $A(s, a)$, which represents how much better taking action
$a$ in state $s$ is compared to the average action.

The key innovation in AFU lies in how it computes the value and advantage
functions. Instead of relying on the actor to estimate the maximum value of
$Q(s, a)$ over actions, AFU directly decomposes $Q(s, a)$ into $V(s) + A(s,
a)$. This decomposition, combined with a conditional gradient scaling
mechanism, allows AFU to solve the maximization problem in Q-learning without
depending on the actor. This mechanism allows AFU to maintain stable learning
by adaptively adjusting the gradient flow depending on whether the current
estimate falls short of the target.

==== IQL

==== Cal-QL

==== Off-policy learning experimental setup
Our first experiment aims to evaluate whether AFU can truly learn from randomly
generated data, a capability that would distinguish it from traditional
off-policy algorithms like DDPG and SAC. The hypothesis stems from the
theoretical properties of AFU's critic update mechanism, which, unlike
SARSA-based algorithms, does not rely on the actor's improvement to approximate
the max-Q operation.

Traditional actor-critic algorithms like SAC and DDPG are structurally closer
to SARSA than to Q-learning. Despite being categorized as off-policy, they
depend on the actor to generate actions for the critic's updates, creating an
implicit coupling. In contrast, AFU's value and advantage decomposition,
combined with conditional gradient scaling, allows it to compute critic updates
independently of the actor, potentially enabling true off-policy learning.

To test this hypothesis, we designed a protocol where instead of collecting
experience through environment interaction with the current policy, we randomly
sample states from the observation space and actions from the action space.
This sampling is uniform, representing the extreme case of off-policy data with
no correlation to any learning policy. If AFU can converge under these
conditions while traditional algorithms struggle, it would validate its
theoretical advantage in truly off-policy learning.

==== Offline-to-online transition experimental setup
Our second experiment investigates the stability of algorithms during the
transition from offline to online learning. This transition presents a
significant challenge due to the distribution shift between the fixed offline
dataset and the data generated by the current policy during online learning.

Offline reinforcement learning algorithms often employ conservatism to prevent
overestimation of out-of-distribution actions. While this conservatism is
beneficial during offline learning, it can hinder exploration during subsequent
online learning. Algorithms like IQL and CALQL address this through different
mechanisms: IQL uses expectile regression to estimate maximum values without
querying unseen actions, while CALQL explicitly constrains Q-values for
out-of-distribution actions.

We hypothesize that AFU may exhibit superior stability during this transition
due to its ability to estimate maximum Q-values without relying on the actor.
This capability potentially reduces the need for explicit conservatism,
allowing AFU to adapt more smoothly when transitioning to online learning.

To test this hypothesis, we generated datasets from policies at different
stages of training, capturing trajectories at fixed intervals during policy
learning. We then trained algorithms offline on these datasets before
transitioning to online learning. The primary evaluation metric is the area
between the learning curve and the maximum stable performance level following
the transition point, which quantifies how quickly and stably an algorithm
recovers during the online phase.







// === Overview
//
// AFU (Actor-Free Updates) is an off-policy reinforcement learning
// algorithm that decouples the critic update from the actor. The core
// innovation lies in how AFU solves the #emph[max-Q problem];: instead of
// relying on an actor network to approximate $arg max_a Q (s \, a)$, it
// trains a value network $V_phi.alt (s)$ via regression to estimate
// $max_a Q (s \, a)$ directly.
//
// AFU employs three types of networks:
//
// - A Q-function $Q_psi (s \, a)$, trained using temporal-difference
//   learning;
//
// - A value network $V_(phi.alt_i) (s)$, trained to approximate
//   $max_a Q (s \, a)$;
//
// - An advantage network $A_(xi_i) (s \, a)$, enforcing
//   $Q (s \, a) approx V (s) + A (s \, a)$, with $A (s \, a) lt.eq 0$.
//
// === Solving the Max-Q Problem
//
// The value and advantage networks are trained using the following
// soft-constrained loss:
// $ Lambda'_(V \, A) (phi.alt \, xi) = bb(E)_((s \, a) tilde.op cal(D)) [Z (Upsilon^a (s) - Q_psi (s \, a) \, A_xi (s \, a))] \, $
// where $ Z (x \, y) = cases(delim: "{", (x + y)^2 \, & upright("if ") x gt.eq 0, x^2 + y^2 \, & upright("otherwise")) $, and
// $Upsilon^a (s)$ modulates the gradient update to down-weight increases
// in $V_phi.alt$ when they would otherwise overestimate $Q$. This
// conditional gradient rescaling avoids the instability issues observed in
// regularized approaches like IQL or SQL.
//
// === Actor Training in AFU-alpha
//
// In AFU-alpha, a stochastic actor $pi_theta$ is used for data collection
// and trained using a SAC-style loss:
// $ L_pi (theta) = bb(E)_(s \, a tilde.op pi_theta) [alpha log pi_theta (a divides s) - Q_psi (s \, a)] \, $
// $ L_(upright("temp")) (alpha) = bb(E)_(s \, a tilde.op pi_theta) [- alpha log pi_theta (a divides s) - alpha H^(‾)] \, $
// where $H^(‾)$ is a target entropy and $alpha$ is a temperature parameter
// optimized during training.
//
// === AFU-beta: Actor Guidance via Gradient Projection
//
// To improve upon AFU-alpha and address SAC-like failure modes, AFU-beta
// introduces a regressed guidance network $mu_zeta (s)$, trained to match
// actions with high Q-values. Actor gradients are then projected to avoid
// directions that deviate from $mu_zeta (s)$ in low-value regions:
// $ upright(bold(G))_(s \, a) (nabla_a Q_psi (s \, a)) = cases(delim: "{", upright("proj")_(tack.t (mu_zeta (s) - a)) (nabla_a Q_psi (s \, a)) \, & upright("if misaligned and ") Q (s \, a) < V (s) \,, nabla_a Q_psi (s \, a) \, & upright("otherwise") .) $
//
// This results in a modified policy gradient
// $nabla_theta^(upright("MODIF")) L_pi (theta)$, which helps prevent the
// actor from becoming trapped in local optima.
//
// === Connection to Research Objectives
//
// AFU's design directly addresses our two research hypotheses:
//
// + #strong[Learning from Random Data:] Since AFU's critic is
//   actor-independent, it can learn effectively from random or off-policy
//   transitions, unlike SAC or DDPG.
//
// + #strong[Offline-to-Online Stability:] AFU's critic does not suffer
//   from over- or underestimation when exposed to unseen actions during
//   the transition from offline to online learning, offering more stable
//   performance.
//
// In this study we will try to validate these hypotheses by creating various experimental settings. We will also compare AFU with other algorithms such as SAC, IQL and Cal-QL.
//
// == Experimental study
//
// === Off and On-Policy Training
//
// ==== First Results
//
// We evaluated AFU on the CartPoleContinuous environment and obtained results that closely match those observed using Mr. Perrin's original implementation. [These results are included in the figures attached to this report] -- Mettre les figures. AFU significantly outperforms SAC on this task. Notably, AFU achieves these results in only 50k iterations, compared to the 200k required by SAC. As shown in the histograms, AFU also demonstrates greater consistency, suggesting improved stability and reliability during training.
//
// However in the Pendulum environment, despite multiple runs, AFU performs poorly, failing to converge even after 1 million steps. In contrast, SAC reliably converges in under 50k steps. Given these results, we did not proceed with Off-Policy training for AFU on this environment.
//
// Finally, we conducted experiments on LunarLander. This time, AFU performed well and successfully converged. We runned 1 million steps, but analysis of the learning curve indicates that convergence was already achieved by around 200k steps. We provide histograms showing performance distributions, which (albeit potentially exaggerated) suggest that AFU substantially outperforms SAC on this task.
//
// Encouraged by these results, we tested AFU in an Off-Policy setting on LunarLander, using 200k training steps. Unfortunately, the results were similar to those of SAC: neither algorithm achieved meaningful convergence. To verify whether this was due to insufficient data, we extended the training to 1 million steps, but AFU still failed to converge under Off-Policy training.
//
// These results suggest that while AFU performs competitively--and at times better than SAC--in On-Policy settings, its Off-Policy capabilities remain limited, particularly in more complex environments like LunarLander.
//
// ==== Make AFU more intersting than SAC in an Off-Policy setting
//
// Our preliminary results suggest that the initial hypothesis -- that AFU can effectively learn from uniformly generated state-action data -- is likely incorrect. This observation has led us to explore potential reasons behind this behavior and to design alternative experimental settings that could both validate AFU's utility and demonstrate its Off-Policy potential compared to algorithms such as SAC. We outline two such experiments below.
//
// 1. Varying the Degree of Policy-Driven Behavior via an Epsilon Parameter
//
// A straightforward experimental modification involves introducing a tunable parameter $epsilon$ $in$ [0, 1]. At each step of data generation, a uniform random variable is sampled. If the sample is less than $epsilon$, a state-action pair is drawn uniformly at random, mimicking our prior Off-Policy setting. Otherwise, the action taken is the one prescribed by the current policy, corresponding to the On-Policy setting.
//
// This setup allows us to generate a range of datasets interpolating between the On-Policy regime ($epsilon$ = 0) and fully random Off-Policy regime ($epsilon$ = 1). We propose to plot the performance across varying $epsilon$ values, using statistical summaries such as whisker plots (e.g., Q1, IQM, Q3) to visualize trends. If AFU is truly more Off-Policy capable than SAC, its performance degradation should be less pronounced as $epsilon$ increases. This experiment offers a simple yet effective framework for assessing the Off-Policy robustness of learning algorithms. [Résultats à inclure dans le rapport]
//
// 2. State-Space Constraints and the Role of Accessible States
//
// To better understand the mechanisms behind AFU's behavior, we return to the tabular case. In this setting, it is possible to explicitly construct a lookup table that maps each state to the optimal action over an infinite horizon. When the state space is sufficiently small, exhaustive exploration via random state-action pairs can, in principle, lead to convergence—even for algorithms that are not inherently Off-Policy.
//
// For example, in a simple 4x5 maze with 4 actions per state, the total number of state-action pairs is only 80. After sufficient repetitions (e.g., 80k samples), learning the optimal action mapping becomes feasible via brute force. In deep reinforcement learning, such a lookup table is no longer feasible due to the continuous and high-dimensional nature of the state and action spaces. However, the underlying goal — learning a function that approximates such a mapping — remains intact.
//
// This perspective sheds light on our results in CartPoleContinuous. Despite the continuous nature of the problem, its effective state-space dimensionality is low. The first state variable (cart position) exhibits a high degree of symmetry and repetition, and we further constrained velocities to lie between -8 and +8. These simplifications reduce the practical complexity of the environment. Thus, brute-force learning may still succeed, even when relying on random data.
//
// Importantly, much of the theoretical state-space is not reachable during normal episodes. For example, while velocity can range from -∞ to +∞, in practice, only a narrow subspace of values is observed. We refer to this subspace as the accessible state space. Uniformly sampling across the full space may therefore introduce states that are highly unrealistic and ultimately irrelevant to learning a useful policy.
//
// This observation generalizes. Consider a tabular environment with 100B states, where the optimal trajectory only spans 10 states. Random sampling would rarely encounter meaningful states, and learning would stagnate. In LunarLander, we observed behaviors in which the agent exits the visible screen or exhibits unusual dynamics such as rotating mid-air — scenarios that are rarely encountered under a standard policy. Learning accurate Q-values for such states may come at the expense of learning for states within the accessible region.
//
// Based on this, we propose a second experiment. First, define bounds on each dimension of the state space to better approximate the accessible subspace. Training the algorithm solely within these constraints may yield better convergence. We can then extend this by performing random walks through the environment: sample an initial state within the constrained bounds, and then take random actions for each step. This would naturally constrain the set of states encountered during training.
//
// Such an experimental setup simulates learning from behavior that is entirely unrelated to the agent's own policy. A critic capable of learning accurate Q-values in this setting -- as AFU purports to do -- should outperform critics like SAC, which rely on the actor for accurate Q-value estimation. This setup thus offers a clearer test of the Off-Policy learning capacity of AFU.
//
// The same $epsilon$-based framework from the first experiment could be employed here, offering another way to measure degradation in performance as the data distribution diverges from the policy. [Résultats à inclure dans le rapport]

=== Offline to Online Training

==== First Results

We also evaluated AFU in an Offline-to-Online setting, where the agent first learns from a fixed dataset and then transitions to online learning. We used the same datasets as in the previous experiments, but this time we trained AFU for 1 million steps in an offline setting before switching to online training.

== Conclusion

== Appendix A

=== Experimental Details

==== Environment Wrappers

The custom environment wrappers used in this study include the following methods:
- `_set_state`: Allows resetting the environment to a specific state.
- `get_obs`: Retrieves the current observation.
- `get_observation_space`: Returns the observation space of the environment.
- `get_action_space`: Returns the action space of the environment.

These wrappers were implemented to ensure compatibility with the algorithms and to facilitate reproducibility of the experiments.

==== Hyperparameters

The following hyperparameters were used for the experiments:
- Learning rate: 
- Discount factor ($gamma$): 
- Batch size: 
- Replay buffer size: 
- Target network update rate ($tau$): 
- Temperature parameter ($alpha$): 

=== Reproducibility

The code for all algorithms and experiments is available at [GitHub Repository]. The repository includes detailed instructions for setting up the environment and running the experiments.

=== Additional Figures

Figures referenced in the report, including learning curves and performance histograms, are provided in the supplementary materials. These figures illustrate the comparative performance of the algorithms across different environments and settings.

== Appendix B

=== Cal-QL errors

// TODO: a ajouter les erreurs

